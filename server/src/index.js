// Main Server File - Express + Socket.IO + RabbitMQ
import express from 'express';
import { createServer } from 'http';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import dotenv from 'dotenv';

// Configuration
import sequelize, { testConnection, syncDatabase } from './config/database.js';
import { connectRabbitMQ } from './config/rabbitmq.js';
import { initializeSocket } from './config/socket.js';

// Routes
import authRoutes from './routes/authRoutes.js';
import announcementRoutes from './routes/announcementRoutes.js';
import meetingRoutes from './routes/meetingRoutes.js';
import userRoutes from './routes/userRoutes.js';

// Environment variables
dotenv.config();

const PORT = process.env.PORT || 3000;
const NODE_ENV = process.env.NODE_ENV || 'development';

// Express app olu≈ütur
const app = express();
const httpServer = createServer(app);

// Middleware
app.use(helmet()); // G√ºvenlik header'larƒ±
app.use(cors({
  origin: process.env.CLIENT_URL || 'http://localhost:5173',
  credentials: true
}));
app.use(express.json()); // JSON body parser
app.use(express.urlencoded({ extended: true })); // URL encoded body parser

// Logging (sadece development ortamƒ±nda)
if (NODE_ENV === 'development') {
  app.use(morgan('dev'));
}

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    success: true,
    message: 'Server is running',
    timestamp: new Date().toISOString(),
    environment: NODE_ENV
  });
});

// API Routes
app.use('/api/auth', authRoutes);
app.use('/api/announcements', announcementRoutes);
app.use('/api/meetings', meetingRoutes);
app.use('/api/users', userRoutes);

// 404 Handler
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: 'Endpoint bulunamadƒ±',
    path: req.originalUrl
  });
});

// Global Error Handler
app.use((err, req, res, next) => {
  console.error('Global Error:', err);
  
  res.status(err.status || 500).json({
    success: false,
    message: err.message || 'Sunucu hatasƒ±',
    error: NODE_ENV === 'development' ? err.stack : undefined
  });
});

/**
 * Server'ƒ± ba≈ülat
 */
const startServer = async () => {
  try {
    console.log('üöÄ Site Y√∂netim Sistemi ba≈ülatƒ±lƒ±yor...');
    console.log(`üìç Ortam: ${NODE_ENV}`);

    // 1. Veritabanƒ± baƒülantƒ±sƒ±nƒ± test et
    console.log('\nüìä MySQL baƒülantƒ±sƒ± test ediliyor...');
    const dbConnected = await testConnection();
    
    if (!dbConnected) {
      throw new Error('Veritabanƒ± baƒülantƒ±sƒ± ba≈üarƒ±sƒ±z!');
    }

    // 2. Veritabanƒ± tablolarƒ±nƒ± senkronize et
    console.log('üîÑ Veritabanƒ± tablolarƒ± senkronize ediliyor...');
    await syncDatabase(false); // false = mevcut tablolarƒ± silme

    // 3. RabbitMQ baƒülantƒ±sƒ±nƒ± kur
    console.log('\nüê∞ RabbitMQ baƒülantƒ±sƒ± kuruluyor...');
    try {
      await connectRabbitMQ();
    } catch (rabbitError) {
      console.warn('‚ö†Ô∏è RabbitMQ baƒülantƒ±sƒ± ba≈üarƒ±sƒ±z, devam ediliyor...');
      console.warn('Mesaj: RabbitMQ servisi √ßalƒ±≈ümƒ±yor olabilir');
    }

    // 4. Socket.IO'yu ba≈ülat
    console.log('\nüîå Socket.IO ba≈ülatƒ±lƒ±yor...');
    initializeSocket(httpServer);

    // 5. HTTP Server'ƒ± ba≈ülat
    httpServer.listen(PORT, () => {
      console.log('\n' + '='.repeat(50));
      console.log(`‚úÖ Server ba≈üarƒ±yla ba≈ülatƒ±ldƒ±!`);
      console.log(`üåê URL: http://localhost:${PORT}`);
      console.log(`üì° Health Check: http://localhost:${PORT}/health`);
      console.log(`üîê API Base: http://localhost:${PORT}/api`);
      console.log('='.repeat(50) + '\n');
    });

  } catch (error) {
    console.error('\n‚ùå Server ba≈ülatma hatasƒ±:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
};

// Graceful Shutdown
const gracefulShutdown = async (signal) => {
  console.log(`\n‚èπÔ∏è ${signal} sinyali alƒ±ndƒ±, server kapatƒ±lƒ±yor...`);
  
  // HTTP server'ƒ± kapat
  httpServer.close(async () => {
    console.log('üëã HTTP server kapatƒ±ldƒ±');
    
    // Veritabanƒ± baƒülantƒ±sƒ±nƒ± kapat
    try {
      await sequelize.close();
      console.log('üíæ Veritabanƒ± baƒülantƒ±sƒ± kapatƒ±ldƒ±');
    } catch (error) {
      console.error('‚ùå Veritabanƒ± kapatma hatasƒ±:', error.message);
    }

    console.log('‚úÖ T√ºm baƒülantƒ±lar g√ºvenli ≈üekilde kapatƒ±ldƒ±');
    process.exit(0);
  });

  // 10 saniye i√ßinde kapanmazsa zorla kapat
  setTimeout(() => {
    console.error('‚ö†Ô∏è Zaman a≈üƒ±mƒ±, zorla kapatƒ±lƒ±yor...');
    process.exit(1);
  }, 10000);
};

// Process event listeners
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection:', reason);
});
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  gracefulShutdown('UNCAUGHT_EXCEPTION');
});

// Server'ƒ± ba≈ülat
startServer();

export default app;
